#!/bin/sh

# USB storage device setup script

# Requires the following positional arguments for USB storage
# 1st = largest for archive (chain)
# 2nd = medium for volatile (swap)
# 3rd = smallest for important (keys)
# 4th = largest partition UUID
# 5th = medium partition UUID
# 6th = smallest partition UUID
# 7th = partition size in bytes of largest (archive)

# Todo: symlink/bind mount docker containers from /var/lib/docker to /media/archive
# Todo: symlink /var/log to /media/volatile

LARGEST=$1
MEDIUM=$2
SMALLEST=$3
LARGEST_UUID=$4
MEDIUM_UUID=$5
SMALLEST_UUID=$6
LARGEST_SIZE=$7

check_args() {
  if [ -z "${LARGEST}" ]; then
    echo 'Error: "archive" USB unavailable'
    exit 1
  elif [ -z "${MEDIUM}" ]; then
    echo 'Error: "volatile" USB unavailable'
    exit 1
  elif [ -z "${SMALLEST}" ]; then
    echo 'Error: "important" USB unavailable'
    exit 1
  elif [ -z "${LARGEST_UUID}" ]; then
    echo 'Error: "largest" USB UUID undefined'
    exit 1
  elif [ -z "${MEDIUM_UUID}" ]; then
    echo 'Error: "medium" USB UUID undefined'
    exit 1
  elif [ -z "${SMALLEST_UUID}" ]; then
    echo 'Error: "smallest" USB UUID undefined'
    exit 1
  elif [ -z "${LARGEST_SIZE}" ]; then
    echo 'Error: "archive" USB size undefined'
    exit 1
  fi
}

create_mount_points() {
  echo "Create mount points"
  mkdir /media/important
  mkdir /media/volatile
  mkdir /media/archive
}

mnt_ext4() {
  mount -t ext4 /dev/"${1}" "${2}"
}

mnt_any() {
  mount /dev/"${1}" "${2}"
}


mount_usb_devs() {
  echo "Mount ext4 usb storage devices"
  if [ "$(mnt_ext4 "${LARGEST}" /media/archive)" -ne 0 ]; then
    echo "Warning: /dev/${LARGEST} is not mountable as ext4"
    if [ "$(mnt_any "${LARGEST}" /media/archive)" -ne 0 ]; then
      echo "Error: /dev/${LARGEST} is not mountable with any supported format"
      echo "Cannot proceed without all USB storage devices"
      exit 1
    fi
  fi
  if [ "$(mnt_ext4 "${MEDIUM}" /media/volatile)" -ne 0 ]; then
    echo "Warning: /dev/${MEDIUM} is not mountable as ext4"
    if [ "$(mnt_any "${MEDIUM}" /media/volatile)" -ne 0 ]; then
      echo "Error: /dev/${MEDIUM} is not mountable with any supported format"
      echo "Cannot proceed without all USB storage devices"
      exit 1
    fi
  fi
  if [ "$(mnt_ext4 "${SMALLEST}" /media/important)" -ne 0 ]; then
    echo "Warning: /dev/${SMALLEST} is not mountable as ext4"
    if [ "$(mnt_any "${SMALLEST}" /media/important)" -ne 0 ]; then
      echo "Error: /dev/${SMALLEST} is not mountable with any supported format"
      echo "Cannot proceed without all USB storage devices"
      exit 1
    fi
  fi
}

check_to_destroy() {
  echo "Check devices for destruction flag"
  if [ -f /media/archive/DESTROY_ALL_DATA_ON_THIS_DEVICE.txt ]; then
    echo "Going to destroy all data on /dev/${LARGEST} in 3 seconds..."
    umount /dev/"${LARGEST}" && \
    sleep 3 && \
    mkfs.ext4 -F /dev/"${LARGEST}" && \
    mount -t ext4 /dev/"${LARGEST}" /media/archive
  fi
  if [ -f /media/volatile/DESTROY_ALL_DATA_ON_THIS_DEVICE.txt ]; then
    echo "Going to destroy all data on /dev/${MEDIUM} in 3 seconds..."
    umount /dev/"${MEDIUM}" && \
    sleep 3 && \
    mkfs.ext4 -F /dev/"${MEDIUM}" && \
    mount -t ext4 /dev/"${MEDIUM}" /media/volatile
  fi
  if [ -f /media/important/DESTROY_ALL_DATA_ON_THIS_DEVICE.txt ]; then
    echo "Going to destroy all data on /dev/${SMALLEST} in 3 seconds..."
    umount /dev/"${SMALLEST}" && \
    sleep 3 && \
    mkfs.ext4 -F /dev/"${SMALLEST}" && \
    mount -t ext4 /dev/"${SMALLEST}" /media/important
  fi
}

setup_archive() {
  if [ -d /media/archive/lost+found ]; then
    echo "Add archive usb to fstab"
    echo "UUID=${LARGEST_UUID} /media/archive ext4 defaults,noatime 0 0" >> /etc/fstab
  else
    echo 'Warning: "archive" usb does not seem to be ext4 formatted'
    echo "/dev/${LARGEST} will not be added to /etc/fstab"
  fi
}

setup_important() {
  if [ -d /media/important/lost+found ]; then
    echo "Add important usb to fstab"
    echo "UUID=${SMALLEST_UUID} /media/important ext4 defaults,noatime 0 0" >> /etc/fstab
  else
    echo 'Warning: "important" usb does not seem to be ext4 formatted'
    echo "/dev/${SMALLEST} will not be added to /etc/fstab"
  fi
}

setup_volatile() {
  if [ -d /media/volatile/lost+found ]; then
    echo "Add volatile usb to fstab"
    echo "UUID=${MEDIUM_UUID} /media/volatile ext4 defaults,noatime 0 0" >> /etc/fstab
    if [ -f /media/volatile/volatile/swap ]; then
      echo "Swap exists, adding to fstab"
      echo '/media/volatile/volatile/swap none swap sw,pri=100 0 0' >> /etc/fstab
    else
      echo 'Create swap on "volatile" usb device'
      mkdir /media/volatile/volatile
      dd if=/dev/zero of=/media/volatile/volatile/swap bs=1M count=1024 && \
      mkswap /media/volatile/volatile/swap && \
      # swapon with high priority
      swapon /media/volatile/volatile/swap -p 100 && \
      echo '/media/volatile/volatile/swap none swap sw,pri=100 0 0' >> /etc/fstab
    fi
    # Enable swap
    echo "Enabling swap at runlevel so it starts up"
    cd /etc/runlevels/boot && \
    /bin/ln -s /etc/init.d/swap swap
  else
    echo 'Warning: "volatile" usb does not seem to be ext4 formatted'
    echo "/dev/${MEDIUM} will not be added to /etc/fstab"
  fi
}

setup_usb_devs() {
  setup_archive
  setup_important
  setup_volatile
}

setup_archive_bitcoind() {
  echo "Detecting existing bitcoin node data"
  if [ -d /media/archive/archive/bitcoin ]; then
    echo "Existing bitcoin archive dir found"
  else
    echo "No bitcoin archive found, creating"
    mkdir /media/archive/archive
    mkdir /media/archive/archive/bitcoin
    mkdir /media/archive/archive/bitcoin/blocks
    mkdir /media/archive/archive/bitcoin/chainstate
  fi
}

setup_volatile_bitcoind() {
  if [ -d /media/volatile/volatile/bitcoin ]; then
    echo "Existing bitcoin volatile dir found"
  else
    echo "No bitcoin volatile dir found, creating"
    mkdir /media/volatile/volatile
    mkdir /media/volatile/volatile/bitcoin
  fi
}

setup_important_bitcoind() {
  if [ -d /media/important/important/bitcoin ]; then
    echo "Existing bitcoin important dir found"
  else
    echo "No bitcoin important dir, creating"
    # Returns 1/2 of partition size in MB
    PRUNE_SIZE=$((LARGEST_SIZE/1000000/2))
    echo "Using ${PRUNE_SIZE}MB as prune target"
    mkdir /media/important/important
    mkdir /media/important/important/bitcoin
    mkdir /media/important/important/bitcoin/wallets
    /bin/sed -i "s/prune=1500/prune=${PRUNE_SIZE}/g;" /home/lncm/bitcoin/bitcoin.conf
    cp /home/lncm/bitcoin/bitcoin.conf /media/important/important/bitcoin/
  fi
}

setup_important_lnd() {
  echo "Setup lnd important directory"
  if [ -d /media/important/important/lnd ]; then
    echo "Existing lnd important dir found"
  else
    echo "No lnd important dir found, creating"
    mkdir /media/important/important/lnd
    mkdir /media/important/important/lnd/data
    cp /home/lncm/lnd/lnd.conf /media/important/important/lnd/
  fi
}

setup_volatile_lnd() {
  if [ -d /media/volatile/volatile/lnd ]; then
    echo "Existing lnd volatile dir found"
  else
    echo "No lnd volatile dir found, creating"
    mkdir /media/volatile/volatile/lnd
    mkdir /media/volatile/volatile/lnd/logs
  fi
}

setup_important_nginx() {
  echo "Setup nginx important dir"
  if [ -d /media/important/important/nginx ]; then
    echo "Existing nginx dir found"
  else
    echo "No nginx important dir found, creating"
    mkdir -p /media/important/important/nginx
    cp -rv /home/lncm/nginx/ /media/important/important/nginx/
  fi
}

setup_volatile_nginx() {
  if [ -d /media/volatile/volatile/nginx ]; then
    echo "Existing nginx directory found"
  else
    echo "No volatile nginx directory, creating"
    mkdir /media/volatile/volatile/nginx
  fi
}

setup_bitcoind() {
  setup_archive_bitcoind
  setup_important_bitcoind
  setup_volatile_bitcoind
}

setup_lnd() {
  setup_important_lnd
  setup_volatile_lnd
}

setup_nginx() {
  setup_important_nginx
  setup_volatile_nginx
}

check_args
create_mount_points
mount_usb_devs
check_to_destroy
setup_usb_devs
setup_bitcoind
setup_lnd
setup_nginx
