#!/sbin/openrc-run

## LNCM post-installation script
## To be run on persistently installed SD card

depend() {
  need net lncm-online
  after sshd ntpd
}

start() {
  ebegin "Starting LNCM post-installation"
  # This script will only run once, to complete post-installation

  check_installed() {
    if [ -f /media/mmcblk0p1/installed ]; then
      echo 0
      return 0
    else
      echo 1
      return 1
    fi
  }

  move_cache() {
    echo "Let apk cache live on persistent volume"
    if [ -d /media/mmcblk0p1/cache ]; then
      cp -v /media/mmcblk0p1/cache/* /var/cache/apk/
    fi
    /sbin/setup-apkcache /var/cache/apk
  }
  
  install_python3() {
    echo "Install Python 3 and upgrade PIP"
    /sbin/apk update && \
    /sbin/apk add python3 curl jq
    
    /usr/bin/pip3 install --upgrade pip 
  }

  install_compose() {
    echo "Install docker-compose and dependencies"
    # jq for help with parsing JSON
    /sbin/apk update && \
    /sbin/apk add python3 curl jq

    /usr/bin/pip3 install --upgrade pip && \
    /usr/bin/pip3 install docker-compose==1.23.2
  }
  
  install_noma() {
    echo "Install Noma dependencies in case user wants to install it"
    /sbin/apk add py3-psutil
    #Uncomment noma for now because noma stop seems to be broken
    /usr/bin/pip3 install noma==0.5.0
  }

  install_toml() {
    # Install TOTML parsing library (https://github.com/uiri/toml) so that we can write to the invoicer config files nicely
    echo "Install TOML PIP3 Library"
    /usr/bin/pip3 install toml==0.10.0
  }

  usb_setup() {
    # USB storage setup
    /usr/bin/python3 /usr/local/sbin/lncm-usb.py || exit 1
  }

  verify_usb() {
    echo "Verify USB setup"
    if [ ! -d /media/archive ]; then
      echo '"Archive" USB missing'
      exit 1
    elif [ ! -d /media/important ]; then
      echo '"Important" USB missing'
      exit 1
    elif [ ! -d /media/volatile ]; then
      echo '"Volatile" USB missing'
      exit 1
    fi
  }

  fetch_rpcauth() {
    echo "Generate RPC credentials using rpcauth.py from bitcoin repo"
    curl "https://raw.githubusercontent.com/bitcoin/bitcoin/master/share/rpcauth/rpcauth.py" 2>/dev/null 1>rpcauth.py
    if [ -f ./rpcauth.py ]; then
      chmod 700 rpcauth.py
      ./rpcauth.py lncm | tee /media/important/important/generated.txt | head -2 | tail -1 > /media/important/important/rpcauth.txt
      tail -1 /media/important/important/generated.txt > /media/important/important/rpcpass.txt
      rm rpcauth.py /media/important/important/generated.txt
    else
      echo "Error: could not reach server"
      exit 1
    fi
  }

  check_rpc() {
    echo "Check RPC credentials"
    if [ "$(grep -c rpcauth /media/important/important/rpcauth.txt )" = 0 ]; then
      echo "Error: RPC credentials missing"
      exit 1
    fi
  }

  generate_rpc() {
    if [ -f /media/important/important/rpcauth.txt ]; then
      echo "Apply RPC configuration"
      # Replace strings with what was generated
      RPCAUTHLINE="$(cat /media/important/important/rpcauth.txt)"
      GENERATEDPW="$(cat /media/important/important/rpcpass.txt)"

      # Configure bitcoind
      echo "Configuring bitcoind..."
      /bin/sed -i "s/GENERATEDRPCAUTH/$RPCAUTHLINE/g;"  /home/lncm/bitcoin/bitcoin.conf

      # Configure LND
      echo "Configuring LND..."
      /bin/sed -i "s/RANDOMUSER/lncm/g;"  /home/lncm/lnd/lnd.conf
      /bin/sed -i "s/RANDOMUSER/lncm/g;"  /home/lncm/lnd/tor/lnd.conf
      /bin/sed -i "s/RANDOMUSER/lncm/g;"  /home/lncm/lnd/clearnet/lnd.conf
      /bin/sed -i "s/RANDOMPASS/$GENERATEDPW/g;"  /home/lncm/lnd/lnd.conf
      /bin/sed -i "s/RANDOMPASS/$GENERATEDPW/g;"  /home/lncm/lnd/tor/lnd.conf
      /bin/sed -i "s/RANDOMPASS/$GENERATEDPW/g;"  /home/lncm/lnd/clearnet/lnd.conf

      # Write to docker compose
      echo "Configuring docker-compose..."
      /bin/sed -i "s/RANDOMUSER/lncm/g;"  /home/lncm/compose/docker-compose.yml
      /bin/sed -i "s/RANDOMUSER/lncm/g;"  /home/lncm/compose/tor/docker-compose.yml
      /bin/sed -i "s/RANDOMUSER/lncm/g;"  /home/lncm/compose/clearnet/docker-compose.yml
      /bin/sed -i "s/RANDOMPASS/$GENERATEDPW/g;"  /home/lncm/compose/docker-compose.yml
      /bin/sed -i "s/RANDOMPASS/$GENERATEDPW/g;"  /home/lncm/compose/tor/docker-compose.yml
      /bin/sed -i "s/RANDOMPASS/$GENERATEDPW/g;"  /home/lncm/compose/clearnet/docker-compose.yml
      
      # Configure invoicer
      echo "Configuring invoicer..."
      /usr/local/sbin/lncm-configinvoicer.py "lncm" "$GENERATEDPW" || exit 1
      
    else
      echo "Error generating RPC configuration"
      exit 1
    fi
  }

  install_tor() {
    # Install Tor
    echo "Installing and starting tor (and waiting about 10 seconds)"
    /sbin/apk update && /sbin/apk add tor
    /sbin/service tor start
  }

  enable_tor() {
    echo "Add tor to default runlevels"
    /sbin/rc-update add tor default
  }

  setup_tor() {
    CHECKTOR_HOSTNAME=1
    # Check to see if Tor generated directory exists
    while [ ! -d /var/lib/tor/ssh-v3 ] && [ $CHECKTOR_HOSTNAME -lt 10 ];
    do
      echo "Tor generated directory doesn't exist yet.. waiting";
      CHECKTOR_HOSTNAME=$((CHECKTOR_HOSTNAME+1))
      sleep 2;
    done

    # Now check to see if hostname exists
    if [ -f /var/lib/tor/lnd-v3/hostname ]; then
      echo "Configuring lnd to have tor as a URI available"
      /bin/sed -i "s/; externalip=/externalip=$(cat /var/lib/tor/lnd-v3/hostname)/g; " /home/lncm/lnd/lnd.conf
    else
      echo "Could not find the tor generated files.. exiting"
      exit 1
    fi
  }

  config_bitcoind() {
    echo "Checking for existing bitcoind config (Archive folder)"
    if [ -f /media/archive/archive/bitcoin/bitcoin.conf ]; then
      echo "bitcoin.conf exists, making backup and replacing"
      /bin/cp /media/archive/archive/bitcoin/bitcoin.conf /media/archive/archive/bitcoin/bitcoin.conf.backup &&
      /bin/cp -f /home/lncm/bitcoin/bitcoin.conf /media/archive/archive/bitcoin/bitcoin.conf
    else
      echo "bitcoind.conf does not exist, creating"
      /bin/cp -f /home/lncm/bitcoin/bitcoin.conf /media/archive/archive/bitcoin/bitcoin.conf
    fi
  }

  config_lnd() {
    echo "Checking for existing lnd config"
    if [ -f /media/important/important/lnd/lnd.conf ]; then
      echo "lnd.conf exists, making backup and replacing"
      /bin/cp /media/important/important/lnd/lnd.conf /media/important/important/lnd/lnd.conf.backup &&
      /bin/cp -f /home/lncm/lnd/lnd.conf /media/important/important/lnd/lnd.conf
    else
      echo "lnd.conf does not exist, creating"
      /bin/cp -f /home/lncm/lnd/lnd.conf /media/important/important/lnd/lnd.conf
    fi
  }

  config_nginx() {
    if [[ ! -d /media/important/important/nginx ]]; then
      echo "Creating nginx folders"
      /bin/mkdir -p /media/important/important/nginx/conf.d
    fi
    if [[ ! -d /media/important/important/nginx/conf.d ]]; then
      echo "Creating conf.d if it still doesn't exist"
      /bin/mkdir -p /media/important/important/nginx/conf.d
    fi        
    echo "Checking for existing nginx config"
    if [ -f /media/important/important/nginx/nginx.conf ]; then
        echo "nginx.conf exists, making backup and replacing"
        /bin/cp /media/important/important/nginx/nginx.conf /media/important/important/nginx/nginx.conf.backup &&
        /bin/cp -f /home/lncm/nginx/nginx.conf /media/important/important/nginx/nginx.conf
    else
        echo "nginx.conf does not exist, creating"
        /bin/cp -f /home/lncm/nginx/nginx.conf /media/important/important/nginx/nginx.conf
    fi

    if [ -f /media/important/important/nginx/conf.d/default.conf ]; then
        echo "default.conf exists, making backup and replacing"
        /bin/cp /media/important/important/nginx/conf.d/default.conf /media/important/important/nginx/conf.d/default.conf.backup &&
        /bin/cp -f /home/lncm/nginx/conf.d/default.conf /media/important/important/nginx/conf.d/default.conf
    else
        echo "default.conf does not exists, creating"
        /bin/cp -f /home/lncm/nginx/conf.d/default.conf /media/important/important/nginx/conf.d/default.conf
    fi

    if [ -f /media/important/important/nginx/mime.types ]; then
        echo "mime.types exists, making backup and replacing"
        /bin/cp /media/important/important/nginx/mime.types /media/important/important/nginx/mime.types.backup &&
        /bin/cp -f /home/lncm/nginx/mime.types /media/important/important/nginx/mime.types
    else
        echo "mime.types does not exist, creating"
        /bin/cp -f /home/lncm/nginx/mime.types /media/important/important/nginx/mime.types
    fi
  }

  # for v0.4.0 invoicer configuration
  fetch_invoicerconfig() {
    # Set up logs directory
    if [[ ! -d /media/volatile/volatile/invoicer ]]; then 
      /bin/mkdir -p /media/volatile/volatile/invoicer
    fi
    # Set up config directory    
    if [[ ! -d /media/important/important/invoicer ]]; then
      /bin/mkdir -p /media/important/important/invoicer
    fi
    cd /media/important/important/invoicer
    wget https://raw.githubusercontent.com/lncm/invoicer/0.4.0/invoicer.example.conf -O /media/important/important/invoicer/invoicer.conf
  }

  fetch_invoicerui() {
    echo "Checking for invoicer-ui"
    if [ ! -f /home/lncm/public_html/pos/index.html ]; then
      echo "Fetch invoicer-ui"
      mkdir /home/lncm/public_html/pos
      cd /home/lncm/public_html/pos || exit
      wget https://raw.githubusercontent.com/lncm/invoicer-ui/master/dist/index.html
    fi
  }

  fetch_wifi() {
    echo "Checking for wifi manager"
    if [ ! -f /home/lncm/public_html/wifi/index.html ]; then
      echo "Fetch wifi manager"
      mkdir /home/lncm/public_html/wifi
      cd /home/lncm/public_html/wifi || exit
      wget https://raw.githubusercontent.com/lncm/iotwifi-ui/master/dist/index.html
    fi
  }

  install_crontab() {
    echo "Install crontab"
    /usr/bin/crontab /home/lncm/crontab
  }

  persist_state() {
    echo "Backup apkovl.tar.gz to Root"
    /sbin/lbu package /box.apkovl.tar.gz
  }

  disable_post() {
    echo "Remove lncm-post from boot"
    /sbin/rc-update del lncm-post default
  }

  enable_compose() {
    echo "Enable docker-compose at boot"
    /sbin/rc-update add docker-compose default
    /sbin/service docker-compose start
  }

  main() {
    is_installed=$(check_installed)

    if [ ! "$is_installed" -eq "0" ]; then
      echo "Error: LNCM installation not found!"
      exit 1
    fi

    move_cache
    install_python3
    #install_compose
    #install_toml
    #install_noma
    #usb_setup
    #verify_usb
    # Fetch invoicer into path
    #fetch_invoicerconfig
    #fetch_rpcauth
    #check_rpc
    # Configure invoicer, and services stage
    #generate_rpc
    install_tor
    enable_tor
    #setup_tor
    
    # Copy into path
    #config_bitcoind
    #config_lnd
    #config_nginx
    #fetch_invoicerui
    #install_crontab
    disable_post
    #enable_compose
    persist_state
  }

  main

  eend $?
}
